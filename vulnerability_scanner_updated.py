import nmap
import MySQLdb
import datetime
# Connect to the MySQL server
try:
    db = MySQLdb.connect(
        host="localhost",
        user="root",
        passwd="",
        db="networkwatcher"
    )
    print("Connected to MySQL database!")
except MySQLdb.Error as e:
    print(f"MySQL Error [{e.args[0]}]: {e.args[1]}")
    exit()




def scan_ports(ip_address, ports=[]):
    scanner = nmap.PortScanner()
    port_range = ''
    if ports:
        port_range = ','.join(str(port) for port in ports)
    else:
        port_range = '1-65535'
    scanner.scan(ip_address, arguments=f'-sS -sV -p {port_range}')
    open_ports = []
    for host in scanner.all_hosts():
        if scanner[host].state() == 'up':
            for proto in scanner[host].all_protocols():
                lport = scanner[host][proto].keys()
                for port in lport:
                    if scanner[host][proto][port]['state'] == 'open':
                        open_ports.append(port)
    return open_ports

def check_vulnerability(ip_address, port):
    scanner = nmap.PortScanner()
    scanner.scan(ip_address, str(port), arguments='--script vuln')
    if 'tcp' in scanner[ip_address] and scanner[ip_address]['tcp'].get(port) and scanner[ip_address]['tcp'][port].get('script'):
        script_output = scanner[ip_address]['tcp'][port]['script']
        if 'vuln' in script_output:
            vulns = script_output['vuln']
            for vuln in vulns:
                vulnerability = vuln['id']
                recommendation = vuln['output']
                risk_level = vuln['risk']
                last_scanned = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                insert_scan_results(ip_address, port, vulnerability, recommendation, risk_level, last_scanned)
                print(f"Vulnerability detected: {vulnerability}")
                print(f"Recommendation: {recommendation}")
                print(f"Security risk level: {risk_level}")
        else:
            print(f"No vulnerabilities found for port {port}")
    else:
        print(f"No script output found for port {port}")


def insert_scan_results(ip_address, port, vulnerability, recommendation, risk_level):
    mycursor = db.cursor()
    sql = "INSERT INTO port_scan_results (ip_address, port, vulnerability, recommendation, risk_level) VALUES (%s, %s, %s, %s, %s,%s)"
    val = (ip_address, port, vulnerability, recommendation, risk_level)
    mycursor.execute(sql, val)
    db.commit()
    mycursor.close()

ip_address = '192.168.0.1'
ports = [] # example list of ports to scan
open_ports = scan_ports(ip_address, ports)
if not open_ports:
    open_ports = scan_ports(ip_address) # scan all ports if the specified list is empty
for port in open_ports:
    check_vulnerability(ip_address, port)


##update the script to scan only the ports that are responding. 
